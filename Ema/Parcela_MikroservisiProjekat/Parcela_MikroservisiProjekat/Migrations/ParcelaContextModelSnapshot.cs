// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parcela_MikroservisiProjekat.Models;

#nullable disable

namespace Parcela_MikroservisiProjekat.Migrations
{
    [DbContext(typeof(ParcelaContext))]
    partial class ParcelaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Parcela_MikroservisiProjekat.Models.DeoParcele", b =>
                {
                    b.Property<int>("deoParceleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("deoParceleId"));

                    b.Property<string>("povrsina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("redniBroj")
                        .HasColumnType("int");

                    b.HasKey("deoParceleId");

                    b.ToTable("deoParcele");

                    b.HasData(
                        new
                        {
                            deoParceleId = 1,
                            povrsina = "200m2",
                            redniBroj = 3
                        },
                        new
                        {
                            deoParceleId = 2,
                            povrsina = "300m2",
                            redniBroj = 4
                        },
                        new
                        {
                            deoParceleId = 3,
                            povrsina = "400m2",
                            redniBroj = 5
                        });
                });

            modelBuilder.Entity("Parcela_MikroservisiProjekat.Models.KatastarskaOpstinaVO", b =>
                {
                    b.Property<int>("katastarskaOpstinaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("katastarskaOpstinaId"));

                    b.Property<string>("katastarskaOpstinaNaziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("katastarskaOpstinaId");

                    b.ToTable("katastarskaOpstinaVO");

                    b.HasData(
                        new
                        {
                            katastarskaOpstinaId = 1,
                            katastarskaOpstinaNaziv = "Lipovac"
                        },
                        new
                        {
                            katastarskaOpstinaId = 2,
                            katastarskaOpstinaNaziv = "Brus"
                        },
                        new
                        {
                            katastarskaOpstinaId = 3,
                            katastarskaOpstinaNaziv = "Odzaci"
                        });
                });

            modelBuilder.Entity("Parcela_MikroservisiProjekat.Models.Parcela", b =>
                {
                    b.Property<int>("parcelaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("parcelaId"));

                    b.Property<int>("brojListaNepokretnosti")
                        .HasColumnType("int");

                    b.Property<int>("brojParcele")
                        .HasColumnType("int");

                    b.Property<int>("deoParceleId")
                        .HasColumnType("int");

                    b.Property<int>("katastarskaOpstinaId")
                        .HasColumnType("int");

                    b.Property<string>("klasa")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("klasaStvarnoStanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("korisnikParcele")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kultura")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("kulturaStvarsnoStanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("oblikSvojine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("obradivost")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("obradivostStvarnoStanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("odvodnjavanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("odvodnjavanjeStvarnoStanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("povrsina")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zasticenaZona")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("zasticenaZonaStvarnoStanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("parcelaId");

                    b.HasIndex("deoParceleId");

                    b.HasIndex("katastarskaOpstinaId");

                    b.ToTable("parcela");

                    b.HasData(
                        new
                        {
                            parcelaId = 1,
                            brojListaNepokretnosti = 1,
                            brojParcele = 1,
                            deoParceleId = 1,
                            katastarskaOpstinaId = 1,
                            klasa = "vrhunska",
                            klasaStvarnoStanje = "visoka",
                            korisnikParcele = "Masa Bobar",
                            kultura = "kultura1",
                            kulturaStvarsnoStanje = "visoka",
                            oblikSvojine = "Nasledstvo",
                            obradivost = "visoka",
                            obradivostStvarnoStanje = "niska",
                            odvodnjavanje = "da",
                            odvodnjavanjeStvarnoStanje = "povoljno",
                            povrsina = "300m2",
                            zasticenaZona = "ima",
                            zasticenaZonaStvarnoStanje = "visoka"
                        },
                        new
                        {
                            parcelaId = 2,
                            brojListaNepokretnosti = 2,
                            brojParcele = 2,
                            deoParceleId = 2,
                            katastarskaOpstinaId = 2,
                            klasa = "vrhunska",
                            klasaStvarnoStanje = "visoka",
                            korisnikParcele = "Uros Bobar",
                            kultura = "kultura1",
                            kulturaStvarsnoStanje = "visoka",
                            oblikSvojine = "Nasledstvo",
                            obradivost = "visoka",
                            obradivostStvarnoStanje = "niska",
                            odvodnjavanje = "da",
                            odvodnjavanjeStvarnoStanje = "povoljno",
                            povrsina = "400m2",
                            zasticenaZona = "ima",
                            zasticenaZonaStvarnoStanje = "visoka"
                        },
                        new
                        {
                            parcelaId = 3,
                            brojListaNepokretnosti = 3,
                            brojParcele = 3,
                            deoParceleId = 3,
                            katastarskaOpstinaId = 3,
                            klasa = "vrhunska",
                            klasaStvarnoStanje = "visoka",
                            korisnikParcele = "Aleksa Bobar",
                            kultura = "kultura1",
                            kulturaStvarsnoStanje = "visoka",
                            oblikSvojine = "Nasledstvo",
                            obradivost = "visoka",
                            obradivostStvarnoStanje = "niska",
                            odvodnjavanje = "da",
                            odvodnjavanjeStvarnoStanje = "povoljno",
                            povrsina = "500m2",
                            zasticenaZona = "ima",
                            zasticenaZonaStvarnoStanje = "visoka"
                        });
                });

            modelBuilder.Entity("Parcela_MikroservisiProjekat.Models.Parcela", b =>
                {
                    b.HasOne("Parcela_MikroservisiProjekat.Models.DeoParcele", "deoParcele")
                        .WithMany()
                        .HasForeignKey("deoParceleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcela_MikroservisiProjekat.Models.KatastarskaOpstinaVO", "katastarskaOpstina")
                        .WithMany()
                        .HasForeignKey("katastarskaOpstinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("deoParcele");

                    b.Navigation("katastarskaOpstina");
                });
#pragma warning restore 612, 618
        }
    }
}
